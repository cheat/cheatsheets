# To copy files from remote to local, maintaining file properties and sym-links
# archive mode (-a), zipping for faster transfer (-z), verbose (-v):
rsync -avz host:file1 :file1 /dest/
rsync -avz /source host:/dest

# To copy files using checksum (-c) rather than time to detect if the file has
# changed. (Useful for validating backups):
rsync -avc <src> <dest>

# To copy (update) the complete directory of /src/foo into destination /dest/foo:
# This command will create /dest/foo if /foo does not already exist in /dest
# archive mode (-a), update (-u), verbose (-v)
rsync -auv <src> <dest>

# To explicitly copy (update) the content of /src/foo> into /dest
# Append a trailing slash on the <src> to avoid creating an additional directory level in /dest 
rsync -auv <src>/ <dest>

# To delete files on <dest>  during the transfer
rsync -auv --del <src> <dest>

# To copy file from local to remote over ssh with non standard port 1234 to
# destination folder in remoteuser's home directory:
rsync -avz -e "ssh -p1234" <source> <username>@<host>:<dest>

# Use the specified authentication key, instead of typing a password:
# (The key can be generated by ssh-keygen, and the public key should be placed
# in remote's authorized_keys, e.g. using ssh-copy-id)
rsync -avz -e "ssh -i ~/.ssh/id_rsa" <src> <dest>

# Log into remote as a user, but promote to root, to access privileged files:
rsync -avz --rsync-path="sudo rsync" user@<src> <dest>

# Rsync only symlinks and preserve them as symlinks (dont follow them):
find /path/to/files -type l -print | \
  rsync -av --files-from=- /path/to/files user@targethost:/dest_path
